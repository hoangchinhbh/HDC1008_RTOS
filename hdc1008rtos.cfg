/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty_min.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var m3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
System.maxAtexitHandlers = 0;

/* Remove debug strings from the application */
Text.isLoaded = false;

/* Remove the raise hook from the application */
Error.raiseHook = null;

/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 512;
}

/* ================ Kernel configuration ================ */
/* Use Custom library with no logging or asserts */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

BIOS.heapSize = 1024;

/* Do not use Hwi_excHandlerMin */
m3Hwi.excHandlerFunc = null;

/* Do not check Task or System stacks  */
Task.checkStackFlag = false;
Hwi.checkStackFlag = false;

/* Reduce the number of Task priorities */
Task.numPriorities = 4;

/* Reduce the default stack size */
Task.defaultStackSize = 512;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
SysMin.bufSize = 256;
var queue0Params = new Queue.Params();
queue0Params.instance.name = "toReadQueue";
Program.global.toReadQueue = Queue.create(queue0Params);
var queue1Params = new Queue.Params();
queue1Params.instance.name = "toWriteQueue";
Program.global.toWriteQueue = Queue.create(queue1Params);
var task0Params = new Task.Params();
task0Params.instance.name = "readSensorBuffer";
task0Params.priority = 2;
Program.global.readSensorBuffer = Task.create("&readSensorBufferFxn", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "writeSensorBuffer";
Program.global.writeSensorBuffer = Task.create("&writeSensorBufferFxn", task1Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "semaRead";
Program.global.semaRead = Semaphore.create(null, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "semaWrite";
Program.global.semaWrite = Semaphore.create(null, semaphore1Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "readTimer";
clock0Params.period = 10;
clock0Params.startFlag = true;
Program.global.readTimer = Clock.create("&readTimerFxn", 100, clock0Params);
Clock.tickPeriod = 10000;
System.extendedFormats = "%$L%$S%$F%f";
